name: Flutter CI/CD Workflow üõ†Ô∏èüöÄ

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'pubspec.yaml'
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type (major/minor/patch)"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'

env:
  FLUTTER_VERSION: 3.24.3
  FIREBASE_PROJECT_ID: "learnza"
  JAVA_VERSION: '17'

jobs:
  test:
    name: "Run Tests üß™"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ runner.tool_cache }}/flutter
            .dart_tool
            build
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Run Dart Fix
        run: |
          dart fix --apply
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "chore: apply dart fixes"
            git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
            git push
          fi

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()

  version-and-build:
    name: "Version Update & Build üèóÔ∏è"
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ runner.tool_cache }}/flutter
            .dart_tool
            build
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'gradle'

      - name: Update version
        id: version
        run: |
          CURRENT_VERSION=$(grep "^version:" pubspec.yaml | awk '{print $2}' | tr -d '\r')
          echo "Current version: $CURRENT_VERSION"
          
          IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
          MAJOR="${version_parts[0]}"
          MINOR="${version_parts[1]}"
          PATCH="${version_parts[2]%%+*}"
          BUILD="${version_parts[2]##*+}"
          
          case "${{ github.event.inputs.release_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            *)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH+$BUILD"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Keystore
        run: |
          mkdir -p ~/keystore
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ~/keystore/upload-keystore.jks
          cat << EOF > android/key.properties
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=~/keystore/upload-keystore.jks
          EOF

      - name: Build Web
        run: flutter build web --release

      - name: Build Android
        run: flutter build apk --release

      - name: Create Firebase Config
        run: |
          cat << EOF > firebase.json
          {
            "hosting": {
              "public": "build/web",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "rewrites": [
                {
                  "source": "**",
                  "destination": "/index.html"
                }
              ]
            }
          }
          EOF
          
          cat << EOF > .firebaserc
          {
            "projects": {
              "default": "${{ env.FIREBASE_PROJECT_ID }}"
            }
          }
          EOF

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build/web/**
            build/app/outputs/flutter-apk/app-release.apk
            firebase.json
            .firebaserc
          retention-days: 7

      - name: Commit version update
        if: success()
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add pubspec.yaml
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
          git push

  deploy:
    name: "Deploy üöÄ"
    needs: version-and-build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .

      - name: List files for debugging
        run: |
          pwd
          ls -la
          ls -la build/web || echo "build/web not found"

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ needs.version-and-build.outputs.new_version }}" \
            "app/outputs/flutter-apk/app-release.apk" \
            --title "Release v${{ needs.version-and-build.outputs.new_version }}" \
            --notes "Release version ${{ needs.version-and-build.outputs.new_version }}"